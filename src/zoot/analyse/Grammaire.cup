package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.expressions.unaire.* ;
import zoot.arbre.expressions.binaire.* ;
import zoot.arbre.instructions.* ;
import zoot.arbre.declarations.* ;
import zoot.exceptions.*;

import java_cup.runtime.*;

action code {::} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminÃ©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    DEBUT, FIN, VARIABLES, FONCTION, POINTVIRGULE, VIRGULE, ECRIRE, EGAL, PAR_OUVRANTE, PAR_FERMANTE, RETOURNE, ADDITION, MULTIPLICATION, INFERIEUR, EGALITE, DIFFERENT, INTERSECTION, UNION, NEGATION, NEGATIF, SI, ALORS, SINON, FINSI, REPETER, JUSQUA, FINREPETER;
terminal String    IDF, CSTENTIERE, CSTBOOLEENNE, ENTIER, BOOLEEN;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, LDCL, DCL, LPAR, PAR_EFF, PAR, PARAM, LFCT, FCT, VAR, LVARLOC;
non terminal Instruction INST ;
non terminal Expression EXP ;
non terminal String TYPE;

precedence left UNION;
precedence left INTERSECTION;
precedence left DIFFERENT;
precedence left EGALITE;
precedence left INFERIEUR;
precedence left ADDITION;
precedence left MULTIPLICATION;
precedence left NEGATION;
precedence left PAR_OUVRANTE, PAR_FERMANTE;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     VARIABLES LDCL:lv FONCTION LFCT:lf DEBUT  LINST:li  FIN
                {: RESULT = li; :}
        |
                FONCTION LFCT:lf DEBUT  LINST:li  FIN
                {: RESULT = li; :}
        |
                VARIABLES LDCL:lv DEBUT  LINST:li  FIN
                {: RESULT = li; :}
        |
                DEBUT  LINST:li  FIN
                {: RESULT = li; :}
                ;

LFCT    ::=     LFCT:lf FCT:f
                {: ((BlocDInstructions)lf).ajouter(f) ;
                    RESULT = lf ; :}
        |
                FCT:f
                {: BlocDInstructions b = new BlocDInstructions(fleft + 1) ;
                   b.ajouter(f) ;
                   RESULT = b ; :}
                ;

LDCL    ::=     LDCL:ld DCL:d
                {: ((BlocDInstructions)ld).ajouter(d) ;
                    RESULT = ld ; :}
        |
                DCL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1) ;
                   b.ajouter(d) ;
                   RESULT = b ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

LPAR    ::=     LPAR:lp PAR:p
                {:
                ((BlocDInstructions)lp).ajouter(p) ;
                   RESULT = lp ; :}
        |
                PAR:p
                {:
                BlocDInstructions b = new BlocDInstructions(pleft + 1) ;
                b.ajouter(p) ;
                RESULT = b ;
                :}
                ;

PAR_EFF   ::=   PAR_EFF:le VIRGULE EXP:e
                {:
                ((BlocDInstructions)le).ajouter(e) ;
                ListeFonctions.getInstance().ajouterParametreEffectif(e);
                RESULT = le ; :}
        |
                EXP:e
                {: BlocDInstructions b = new BlocDInstructions(eleft + 1) ;
                   b.ajouter(e) ;
                   ListeFonctions.getInstance().ajouterParametreEffectif(e);
                   RESULT = b ; :}
                ;

PAR     ::=     TYPE:t IDF:i POINTVIRGULE
                {: TDS.getInstance().entreeBloc();
                Entree e = new Entree(i, "variable");
                Symbole s = new SymboleParam(t, ileft+1, TDS.getInstance().getBlocCourant());

                try {
                    TDS.getInstance().ajouter(e,s);
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                ListeFonctions.getInstance().ajouterParametre(e,s); :}
                ;

LVARLOC    ::=  LVARLOC:lv VAR:v
                {: ((BlocDInstructions)lv).ajouter(v) ;
                   RESULT = lv ; :}
        |
                VAR:v
                {: BlocDInstructions b = new BlocDInstructions(vleft + 1) ;
                b.ajouter(v) ;
                RESULT = b ; :}
                ;

VAR     ::=     TYPE:t IDF:i POINTVIRGULE
                {: try {
                    TDS.getInstance().ajouter(new Entree(i, "variable"), new Symbole(t, ileft+1,TDS.getInstance().getBlocCourant()));
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                } :}
                ;

PARAM   ::=   PAR_OUVRANTE PAR_FERMANTE
              {: TDS.getInstance().entreeBloc(); :}
        |
              PAR_OUVRANTE LPAR PAR_FERMANTE
              {: :}
              ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                IDF:i EGAL EXP:e POINTVIRGULE
                {: RESULT = new Affectation(new Idf(new Entree(i, "variable"),ileft+1), e, eleft+1) ; :}
        |
                RETOURNE EXP:e POINTVIRGULE
                {: RESULT = new Retourne(eleft+1, e); :}
       |
                SI EXP:e ALORS LINST:la SINON LINST:lb FINSI
                {: RESULT = new Conditionnelle(e,eleft+1,la,lb); :}
       |
                SI EXP:e ALORS LINST:l FINSI
                {: RESULT = new Conditionnelle(e,eleft+1,l,null); :}
       |
                SI EXP:e ALORS SINON LINST:l FINSI
                {: RESULT = new Conditionnelle(e,eleft+1,null,l); :}
       |
                SI EXP:e ALORS FINSI
                {: RESULT = new Conditionnelle(e,eleft+1,null,null); :}
       |
                REPETER LINST:li JUSQUA EXP:e FINREPETER
                {: RESULT = new Iterative(li,e,eleft + 1) ; :}
                ;

EXP    ::=     CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               CSTBOOLEENNE:c
               {: RESULT = new ConstanteBooleenne(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Idf(new Entree(i, "variable"), ileft + 1) ; :}
        |
               IDF:i PAR_OUVRANTE PAR_EFF PAR_FERMANTE
               {: RESULT = new AppelFonction(new Idf(new Entree(i, "fonction"), ileft + 1 ),ileft+1) ; :}
        |
               IDF:i PAR_OUVRANTE PAR_FERMANTE
               {: RESULT = new AppelFonction(new Idf(new Entree(i, "fonction"), ileft + 1 ),ileft+1) ; :}
        |
              PAR_OUVRANTE EXP:e PAR_FERMANTE
              {: RESULT = new ExpressionPrioritaire(e,eleft + 1) ; :}
        |
              NEGATIF EXP:e
              {: RESULT = new Oppose(e,eleft + 1) ; :}
        |
              NEGATION EXP:e
              {: RESULT = new Negation(e, eleft+1) ; :}
        |
              EXP:g ADDITION EXP:d
              {: RESULT = new Addition(g, d, gleft+1); :}
        |
              EXP:g MULTIPLICATION EXP:d
              {: RESULT = new Multiplication(g, d, gleft+1); :}
        |
              EXP:g INFERIEUR EXP:d
              {: RESULT = new Inferieur(g, d, gleft+1); :}
        |
              EXP:g EGALITE EXP:d
              {: RESULT = new Egalite(g, d, gleft+1); :}
        |
              EXP:g DIFFERENT EXP:d
              {: RESULT = new Different(g, d, gleft+1); :}
        |
              EXP:g INTERSECTION EXP:d
              {: RESULT = new Intersection(g, d, gleft+1); :}
        |
              EXP:g UNION EXP:d
              {: RESULT = new Union(g, d, gleft+1); :}
              ;

TYPE    ::=     ENTIER
                {: RESULT = "entier"; :}
        |
                BOOLEEN
                {: RESULT = "booleen"; :}
                ;

FCT     ::=     TYPE:t IDF:i PARAM VARIABLES LVARLOC:lv DEBUT LINST:li FIN
                {: try {
                    TDS.getInstance().ajouter(new Entree(i, "fonction"), new SymboleFonction(t, ileft+1));
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                Fonction fonction = new Fonction(li, ileft+1, i, TDS.getInstance().getBlocCourant());
                fonction.recupererParametres();
                fonction.setEtiquette();
                try {
                    ListeFonctions.getInstance().ajouter(fonction);
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                TDS.getInstance().sortieBloc(); :}
       |
                TYPE:t IDF:i PARAM VARIABLES DEBUT LINST:li FIN
                {: try {
                    TDS.getInstance().ajouter(new Entree(i, "fonction"), new SymboleFonction(t, ileft+1));
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                Fonction fonction = new Fonction(li, ileft+1, i, TDS.getInstance().getBlocCourant());
                    fonction.recupererParametres();
                    fonction.setEtiquette();
                try {
                    ListeFonctions.getInstance().ajouter(fonction);
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                TDS.getInstance().sortieBloc(); :}
       |
                TYPE:t IDF:i PARAM  DEBUT LINST:li FIN
                {: try {
                    TDS.getInstance().ajouter(new Entree(i, "fonction"), new SymboleFonction(t, ileft+1));
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                Fonction fonction = new Fonction(li, ileft+1, i, TDS.getInstance().getBlocCourant());
                fonction.recupererParametres();
                fonction.setEtiquette();
                try {
                    ListeFonctions.getInstance().ajouter(fonction);
                } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
                }
                TDS.getInstance().sortieBloc(); :}
                ;


DCL     ::=    TYPE:t IDF:i POINTVIRGULE
               {: try {
                    TDS.getInstance().ajouter(new Entree(i, "variable"), new Symbole(t, ileft+1, TDS.getInstance().getBlocCourant())) ;
               } catch (DoubleDeclaration d) {
                    ListeErreurs.getInstance().ajouter(new Erreur(d.getMessage(),ileft+1));
               } :}
               ;