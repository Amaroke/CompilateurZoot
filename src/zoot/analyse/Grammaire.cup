package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.instructions.* ;
import zoot.arbre.declarations.* ;
import zoot.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    DEBUT, FIN, VARIABLES, FONCTION, POINTVIRGULE, ECRIRE, EGAL, PAR_OUVRANTE, PAR_FERMANTE, RETOURNE;
terminal String    IDF, CSTENTIERE, CSTBOOLEENNE, ENTIER, BOOLEEN;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, LDCL, DCL, PARAM, LFCT, FCT;
non terminal Instruction INST ;
non terminal Expression EXP ;
non terminal String TYPE;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     VARIABLES LDCL:lv FONCTION LFCT:lf DEBUT  LINST:li  FIN
                {: RESULT = li; :}
        |
                VARIABLES LDCL:lv DEBUT  LINST:li  FIN
                {: RESULT = li; :}
        |
                DEBUT  LINST:li  FIN
                {: RESULT = li; :}
                ;

LFCT    ::=     LFCT:lf FCT:f
                {: ((BlocDInstructions)lf).ajouter(f) ;
                    RESULT = lf ; :}
        |
                FCT:f
                {: BlocDInstructions b = new BlocDInstructions(fleft + 1) ;
                   b.ajouter(f) ;
                   RESULT = b ; :}
                ;

LDCL    ::=     LDCL:ld DCL:d
                {: ((BlocDInstructions)ld).ajouter(d) ;
                    RESULT = ld ; :}
        |
                DCL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1) ;
                   b.ajouter(d) ;
                   RESULT = b ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                   ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
              IDF:i EGAL EXP:e POINTVIRGULE
              {: RESULT = new Affectation(new Idf(new Entree(i, "variable"),ileft+1), e, eleft+1) ; :}
        |
              RETOURNE EXP:e POINTVIRGULE
              {: RESULT = new Retourne(eleft+1, e); :}
              ;

EXP    ::=     CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               CSTBOOLEENNE:c
               {: RESULT = new ConstanteBooleenne(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Idf(new Entree(i, "variable"), ileft + 1) ; :}
        |
               IDF:i PAR_OUVRANTE PAR_FERMANTE
               {: RESULT = new AppelFonction(new Idf(new Entree(i, "fonction"), ileft + 1 ),ileft+1) ; :}
                ;

TYPE    ::=     ENTIER
                {: RESULT = "entier"; :}
                |
                BOOLEEN
                {: RESULT = "booleen"; :}
                ;

FCT     ::=     TYPE:t IDF:i PARAM DEBUT LINST:li FIN
                {: TDS.getInstance().ajouter(new Entree(i, "fonction"), new Symbole(t, ileft+1));
                ListeFonctions.getInstance().ajouter(new Fonction(li, ileft+1, i));:}
                ;

DCL     ::=    TYPE:t IDF:i POINTVIRGULE
               {: TDS.getInstance().ajouter(new Entree(i, "variable"), new Symbole(t)) ;:}
               ;

PARAM ::=     PAR_OUVRANTE PAR_FERMANTE
              {: :}
              ;